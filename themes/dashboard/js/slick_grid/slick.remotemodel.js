(function ($) {
  /***
   * A sample AJAX data store implementation.
   * Right now, it's hooked up to load all Apple-related Digg stories, but can
   * easily be extended to support and JSONP-compatible backend that accepts paging parameters.
   */
  function RemoteModel(options) {
    var def_options = {
      PageSize:100,
      BaseUrl:''
    };
    options = $.extend(true,def_options,options);

    // private
    var data = {length: 0};
    var h_request = null;
    var req = null; // ajax request

    // events
    var onDataLoading = new Slick.Event();
    var onDataLoaded = new Slick.Event();


    function init() {

    }


    function isDataLoaded(from, to) {
      for (var i = from; i <= to; i++) {
        if (data[i] == undefined || data[i] == null) {
          return false;
        }
      }

      return true;
    }


    function clear() {
      for (var key in data) {
        delete data[key];
      }
      data.length = 0;
    }


    function ensureData(from, to) {
      /*
      * Небольшое пояснение этой конструкции. При прокручивании возможно такое, что загрузчик будет просто неуспевать загружать новые данные, а человек будет прокручивать все ниже и ниже. Для того, чтобы не было проблем с загрузкой и лишний запросов к серверу, будет просто return'ить такие запросы.
      */
      if (req) {
        return;
      }

      if (from < 0) {
        from = 0;
      }

      var fromPage = Math.floor(from / options.PageSize);
      var toPage = Math.floor(to / options.PageSize);
      while (data[fromPage * options.PageSize] !== undefined && fromPage < toPage)
        fromPage++;

      while (data[toPage * options.PageSize] !== undefined && fromPage < toPage)
        toPage--;

      if (fromPage > toPage || ((fromPage == toPage) && data[fromPage * options.PageSize] !== undefined)) {
        // TODO:  look-ahead
        return;
      }

      var param_string = options.BaseUrl.indexOf('?') != -1?"&offset=" + (fromPage * options.PageSize) + "&limit="+options.PageSize:"?offset=" + (fromPage * options.PageSize) + "&limit="+options.PageSize;

      var url =  options.BaseUrl+param_string;

      if (h_request != null) {
        clearTimeout(h_request);
      }

      h_request = setTimeout(function () {
        for (var i = fromPage; i <= toPage; i++)
          data[i * options.PageSize] = null; // null indicates a 'requested but not available yet'

        onDataLoading.notify({from: from, to: to});

        req = $.ajax({
          url: url,
          dataType:'json',
          type:'POST',
          cache: true, // Digg doesn't accept the autogenerated cachebuster param
          success: onSuccess,
          error: function () {
            common.hideAjaxIndicator();
          }
        });
        req.fromPage = fromPage;
        req.toPage = toPage;
      }, 50);
    }
    function onSuccess(response) {
      if(response.code && response.data){
        switch(response.code){
          case 'success_load_data':
            var from = req.fromPage * options.PageSize, to = from + response.data.count;
            data.length = parseInt(response.data.total);

            for (var i = 0; i < response.data.items.length; i++) {
              data[from + i] = response.data.items[i];
            }

            req = null;
            onDataLoaded.notify({from: from, to: to});
          break;
          case 'error_load_data':
            console.log('Беда случилась при загрузке');
          break;
        }
      }
    }
    function reloadData(from, to) {
      for (var i = from; i <= to; i++)
        delete data[i];

      ensureData(from, to);
    }

    init();

    return {
      // properties
      "data": data,

      // methods
      "clear": clear,
      "isDataLoaded": isDataLoaded,
      "ensureData": ensureData,
      "reloadData": reloadData,

      // events
      "onDataLoading": onDataLoading,
      "onDataLoaded": onDataLoaded
    };
  }

  // Slick.Data.RemoteModel
  $.extend(true, window, { Slick: { Data: { RemoteModel: RemoteModel }}});
})(jQuery);